<html>
	<head>
		<meta charset="UTF-8" />
		<script src="http://code.jquery.com/jquery-3.2.1.js"></script>
        <script language="JavaScript" type="text/javascript" src="js/JsEncrypt.js"></script>
        <script src="js/cryptojs/rollups/aes.js"></script>
		<script src="js/cryptojs/components/mode-ctr-min.js"></script>
		<script src="js/cryptojs/components/pad-nopadding.js"></script>
		<script language="JavaScript" src="js/MessageCoder.js"></script>
		<script language=javascript>
			var adminServer,status,serverResponse;
			$(document).ready(function() 
				 {
					
				 });
			class AdminServer
			{
				constructor(url)
				{
					this.ws;
					this.messageCoder;
					this.url=url;
					this.isFirstConnect=true;
					this.status=$("#status");
					this.serverResponse=$("#serverResponse");
				}
				connect()
				{
					var self=this;
					$(this.status).empty();
					$(serverResponse).empty();
					this.ws = new WebSocket(this.url);
					this.ws.onopen=function()
									{	
										self.sendGreetingMessage();
										self.getMsg().then(function(evt)
														{
															var serverResponseMessage = evt.data;
															var decodedServerResponseMessage = self.keyCoder.decrypt(serverResponseMessage);
															$(self.serverResponse).val($(self.serverResponse).val()+"decoded AES key="+decodedServerResponseMessage+"\n");
															var aesKey=JSON.parse(decodedServerResponseMessage);
															//console.log(aesKey.messageKey,aesKey.ivText);
															self.messageCoder=new MessageCoder(aesKey.messageKey,aesKey.ivText);
														});
									}
				}
				disConnect()
				{
					if (this.ws != null)
					{	
						this.ws.close();
						this.isFirstConnect=true;
						$(this.status).val($(this.status).val()+"Connection closed\n");
					}
				}
				sendGreetingMessage()
				{
					$(this.status).val($(this.status).val()+"Connection established\n");
					this.keyCoder = new JSEncrypt({
						default_key_size: 2048
					});
					var dt = new Date();
					var time = -(dt.getTime());
					this.keyCoder.getKey();
					this.ws.send(this.keyCoder.getPublicKey());
					$(this.status).val($(this.status).val()+"Public key="+this.keyCoder.getPublicKey()+" sent\n");
					this.keyCoder.setPrivateKey(this.keyCoder.getPrivateKey());
				}
				sendMessage(message)
				{
					var self=this;
					this.ws.send(this.messageCoder.encode(message));
					$(this.status).val($(this.status).val()+"Message="+message+" sent\n");
					this.getMsg().then(function(evt)
										{
											var serverResponseMessage = evt.data;
											console.log("Server response:"+serverResponseMessage);
											var message=self.messageCoder.decode(serverResponseMessage);
											$(self.serverResponse).val($(self.serverResponse).val()+message+"\n");
										});
				}
				getMsg() 
				{
					var self=this;
					
					return new Promise((resolve, reject) => {
						self.ws.onmessage = (e) => {
							console.log("Server responsed received at:"+new Date());	
							resolve(e);
						}
					})
				}
			}
			
			function connect()
			{
				adminServer=new AdminServer("ws://localhost:4466/websocket");
				adminServer.connect();
			}
			function sendSomething()
			{
				adminServer.sendMessage("世界盃決賽周分組賽抽籤");
			}
			function disConnect()
			{
				adminServer.disConnect();
			}
		</script>
	</head>
	<body>
		<button onclick="connect()">Connect</button>
		<button onclick="sendSomething()">Send Something</button>
		<button onclick="disConnect()">Disconnect</button>
		<bR>
		<table>
			<tr>
				<td>
					Connection Status<br>
					<textarea id="status" rows=40 cols=80 readonly>
					</textarea>
				</td>
				<td>
					Server Response<br>
					<textarea id="serverResponse" readonly rows=40 cols=80>
					</textarea>
				</td>	
			</tr>
		</table>	
	</body>
</html>	